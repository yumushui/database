#!/usr/bin/env python
#-*- coding:utf-8 -*-

'''
How to mastering the postgresql?
This questions can using a step and test. They all should by be understood and used skilled.

1 The new in postgresql 12 ;
2 Understanding Transactions and Locking
3 Making Use of Indexes
4 Handling Advanced SQL
5 Log Files and System Statistics
6 Optimizing Queries for Good Performance
7 Writing Stored Procedures
8 Managing PostgreSQL Security
9 Handing Backup and Recovery
10 Making Sense of Backups and Replication
11 Deciding on Useful Extensions
12 Troubleshooting PostgreSQL
13 Migrating to PostgreSQL

'''

print('''
对于PostgreSQL数据库到掌握，

事务和锁，代表事务管理模型，索引使用，代表查询管理模型，这是关系型数据库两大核心功能，是共通到必须要掌握到内容。
统计信息和日志，是查看数据库运行状态、读象、日志记录的方式；故障处理，是保证数据库稳定运行的必要前提，一个查看一个处理，是DBA最重要的技能。
数据库安全行，备份恢复，replication复制，这些是数据库管理的通用技能。
高级SQL，查询优化，存储过程，这是与开发直接相关的知识。
新版本特性，扩展组件，数据迁移，是PostgreSQL特有的特色。

归纳一下就是：
核心原理： 事务 和 查询
核心技能： 统计信息 和 故障处理
通用管理技能： 安全性管理  备份恢复  replication复制
通用开发技能： 高级SQL  查询性能优化  存储过程使用
pg特有特色：  新版本特性  扩展组件 数据库迁移



''')

print('''

Log files and System Statistics

-- Grathering runtime statistics
\d pg_stat_activity

SET application_name to 'www.cybertec-postgresql.com';
SHOW application_name;
SELECT pid, query_start, state_change, state, query FROM pg_stat_activity;

SELECT pg_terminate_backend(pid)
FROM pg_stat_activity
WHERE pid <> pg_backend_pid() AND backend_type= 'client backend';

-- Inspecting database
\d pg_stat_database
select * from pg_stat_database;

-- Inspecting tables
\d pg_stat_user_tables
select * from pg_stat_user_tables;

SELECT schemaname, relname, seq_scan, seq_tup_read,
    seq_tup_read / seq_scan AS avg, idx_scan
FROM pg_stat_user_tables
WHERE seq_scan > 0
ORDER BY seq_tup_read DESC
LIMIT 25;

\d pg_statio_user_tables

-- Digging into index
\d pg_stat_user_indexes

select * from pg_stat_user_indexes;

SELECT schemaname, relname, indexrelname, idx_scan,
    pg_size_pretty(pg_relation_size(indexrelid)) AS idx_size,
    pg_size_pretty(sum(pg_relation_size(indexrelid)) OVER (ORDER BY idx_scan, indexrelid)) AS total
FROM pg_stat_user_indexes
ORDER BY 6;

-- Tracking the background worker
\d pg_stat_bgwriter

select * from pg_stat_bgwriter;

-- Tracking, archiving and streaming
\d pg_stat_archiver

select * from pg_stat_archiver;

\d pg_stat_replication
select * from pg_stat_replication;

\d pg_stat_wal_receiver
select * from pg_stat_wal_receiver;

-- checking SSL connections
\d pg_stat_ssl
select * from pg_stat_ssl;

-- inspecting transactions in real time
\d pg_stat_xact_user_tables

select * from pg_stat_xact_user_tables;

-- Tracking vacuum progress
\d pg_stat_progress_vacuum
select * from pg_stat_progress_vacuum;

-- Using pg_stat_satements
\d pg_stat_statements
select * from pg_stat_statments;

SELECT round((100 * total_time / sum(total_time) OVER())::numeric, 2) percent,
    round(total_time::numeric, 2) AS total,
    calls,
    round(mean_time::numeric, 2) AS mean,
    substring(query, 1, 40)
FROM pg_stat_statements
ORDER BY total_time DESC
LIMIT 10;



''')
'''
GitHub中开启二次验证Two-factor authentication，如何在命令行下更新和上传代码
最近在使用GitHub管理代码，在git命令行管理代码时候遇到一些问题。
如果开起了二次验证（Two-factor authentication两个要素认证），命令行会一直提示输入用户名和密码。查找了一下解决方法如下：

1.准备Token信息。
登陆GitHub，通过右上角的设置按钮进入设置页面，点击Personal access tokens，为你的账号创建一个Token， 
创建好以后，保存这个Token，最好保存到你本地文件，因为离开页面后这个将会找不到了。 
然后回到电脑的命令行界面。 
2.设置git保存认证信息 
执行 git config --global credential.helper store 
3.使用git clone代码 
git clone XXXX.git 
此时会提示你输入UserName 和Password， 如： 
Username for 'https://github.com': yourname（此处名称为你在GitHub上的UserNmae，而不是你GitHub的邮箱） 
Password for 'https://hainuo@github.com':此处即为你获得的Token。 
到此OK。 

如果你没有设置git config --global credential.helper store，那么你每次git pull或者 git push时候都会提示你输入UserName和Password。 
如果设置了该选项，则UserName和Password将会被保存，下次直接git pull或者git push即可。 
其实该命令会在用户根目录下生成一个名为.git-credentials的文件，里面保存了你的UserName和Token。

'''

the postgresql in OS system need shell scripts to build and monitor.

